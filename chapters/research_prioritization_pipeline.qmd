# Research Prioritization Pipeline & Analysis

```{r setup, warning=FALSE}
#| label: load-packages-data
#| code-summary: "load packages & data"

library(tidyverse) 

# markdown et al. ----
library(knitr)
library(bookdown)
library(rmarkdown)
library(shiny)
library(quarto)

# dataviz ----
library(ggrepel)
library(plotly) # Create Interactive Web Graphics via 'plotly.js'
library(RColorBrewer)  # for color palettes

# others ----
library(here) # A Simpler Way to Find Your Files

# Make sure select is always the dplyr version
select <- dplyr::select 

# options
options(knitr.duplicate.label = "allow")
options(mc.cores = parallel::detectCores())

# data
evals_pub <- readRDS(file = here("data", "evals.Rdata"))
all_papers_p <- readRDS(file = here("data", "all_papers_p.Rdata"))

# Lists of categories
rating_cats <- c("overall", "adv_knowledge", "methods", "logic_comms", "real_world", "gp_relevance", "open_sci")

#... 'predictions' are currently 1-5 (0-5?)
pred_cats <- c("journal_predict", "merits_journal")

```

    
## Basic presentation

### What sorts of papers/projects are we considering and evaluating? {-}

In this section, we give some simple data summaries and visualizations, for a broad description of The Unjournal's coverage. 


<!-- Todo: make this smaller, get it to fit on the page better, more user-friendly -->

#### Initial pool of papers: categories {-}

Next, we present a plot of categories for all papers in the Unjournal's initial pool. One paper can belong to more than one category. 

```{r all_paper_categories}
#| fig-height: 9
#| 
# how many papers are in this dataset?
n_papers <- select(all_papers_p, id) %>% distinct() %>% nrow()

# plot
all_papers_p %>% 
  select(id, category) %>% 
  unnest(category, keep_empty = T) %>%
  distinct() %>% # just to make sure
  replace_na(list(category = "unknown")) %>%
  group_by(category) %>% 
  count() %>%
  mutate(category = str_to_title(category)) %>%
  ggplot(aes(x = reorder(category, n), y = n)) +
  geom_bar(aes(fill = category), stat = "identity", color = "grey30") + 
  coord_flip() +
  theme_bw() +
  labs(y = "Paper category", x = "Count",
       caption = paste0("Total number of papers = ", n_papers)) +
  theme(legend.position = "none")
```


::: {.callout-note collapse="true"}
##### Next consider...

- Composition of research evaluated
     - By field (economics, psychology, etc.)
     - By subfield of economics 
     - By topic/cause area (Global health, economic development, impact of technology, global catastrophic risks, etc.    )
     - By source (submitted, identified with author permission, direct evaluation)
    
- Timing of intake and evaluation^[Consider: timing might be its own section or chapter; this is a major thing journals track, and we want to keep track of ourselves]

:::

#### Paper selection {-}

The Sankey diagram below starts with the papers we prioritized for likely *Unjournal* evaluation:^[Those marked as 'considering' in the Airtable].

```{r sankey plot}
#| eval: false
#Add in the 3 different evaluation input sources
#update to be automated rather than hard-coded - to look at David's work here

papers_considered <- all_papers_p %>% 
  nrow()

papers_deprio <- all_papers_p %>% 
  filter(`stage of process/todo` ==  "de-prioritized") %>% 
  nrow()

papers_evaluated <- all_papers_p %>% 
  filter(`stage of process/todo` %in% c("published",
                                        "contacting/awaiting_authors_response_to_evaluation",
                                        "awaiting_publication_ME_comments","awaiting_evaluations")) %>% 
  nrow()

papers_complete <- all_papers_p %>% 
  filter(`stage of process/todo` ==  "published") %>%
  nrow()

papers_in_progress <-  papers_evaluated - papers_complete

papers_still_in_consideration <-  all_papers_p %>% filter(`stage of process/todo` ==  "considering") %>% nrow()


#todo: adjust wording of hover notes ('source, target...etc')

fig <- plot_ly(
  type = "sankey",
  orientation = "h",
  
  node = list(
    label = c("Prioritized", "Evaluating", "Complete", "In progress", "Still in consideration", "De-prioritized"),
    color = c("orange", "green", "green", "orange", "orange", "red"),
    #Todo: adjust 'location' to group these left to right
    pad = 15,
    thickness = 20,
    line = list(
      color = "black",
      width = 0.5
    )
  ),
  
  link = list(
    source = c(0,1,1,0,0),
    target = c(1,2,3,4,5),
    value =  c(
      papers_evaluated,
      papers_complete,
      papers_in_progress,
      papers_still_in_consideration,
      papers_deprio
    ))
)
fig <- fig %>% layout(
  title = "Unjournal paper funnel",
  font = list(
    size = 10
  )
)

fig 

```


```{r new sankey plot}

all_papers_p %>% 
  select(id, source_main, `stage of process/todo`) %>% 
  rename(stage = `stage of process/todo`) %>% 
  mutate(source_main = if_else(source_main == "NA", NA_character_, source_main)) %>% 
  replace_na(list(source_main = "unknown", stage = "unknown")) %>%
  mutate(stage0 = "Paper Pool",
         stage1 = case_match(stage,
                             "contacting/awaiting_authors_response_to_evaluation" ~ "Selected",
                             "seeking_(more)_evaluators" ~ "Selected",
                             "published" ~ "Selected",
                             .default = NA_character_),
         stage2 = paste0("Stage: ", str_to_sentence(stage)),
         source_main = str_replace_all(string = source_main, 
                                  pattern = "-", 
                                  replace = " ") %>% 
           # str_to_title() %>% 
           str_replace_all(pattern = "\\s+",
                       replacement = " "),
         source = paste0("Source: ", source_main)) -> temp

temp %>% 
  select(source, stage0, stage1, stage2) %>%
  pivot_longer(cols = everything()) %>% 
  arrange(name) %>% 
  select(value) %>% 
  distinct() %>% drop_na() -> nodes


nodes = tibble(index =  seq(0,nrow(nodes)-1, by = 1),
               label = nodes$value,
               color = c(brewer.pal(n = length(unique(temp$source)), "Pastel2"), # Sources
                         "#984EA3",# all papers
                         "#4DAF4A",# selected
                         "#4DAF9A","#FF7F00","#FFFF33", "#A65628", "#999999","#377288", "#F781BF","#999999")) #outcomes


# link = tibble(source = c(),
#               target = c(),
#               value = c())

# source -> paper pool (stage0) -> stage1 -> stage2

# add source > paper pool (stage0)
link = temp %>% 
  group_by(source, stage0) %>% 
  count() %>%
  rename(target = stage0, value = n) 

# add paper pool > stage1 (selected)
temp %>% 
  group_by(stage0, stage1) %>% 
  count() %>%
  rename(source = stage0, target = stage1, value = n) %>% 
  filter(!is.na(target)) -> temp2

link = bind_rows(link, temp2)

# add paper pool > stage2 (not selected)
temp %>% 
  group_by(stage0, stage1, stage2) %>% 
  count() %>% 
  ungroup() %>%
  filter(is.na(stage1)) %>%
  rename(source = stage0, target = stage2, value = n) %>%
  select(-stage1) -> temp2

link = bind_rows(link, temp2) 

# add selected (stage1) to stage 2
temp %>% 
  group_by(stage0, stage1, stage2) %>% 
  count() %>% 
  ungroup() %>% 
  filter(stage1 == "Selected") %>% 
  rename(source = stage1, target = stage2, value = n) %>%
  select(-stage0) -> temp2

link = bind_rows(link, temp2) 

# add node index to link
link %>% 
  ungroup() %>% 
  left_join(nodes, by = c("source" = "label")) %>%
  rename(source_index = index) %>% 
  left_join(nodes, by = c("target" = "label")) %>%
  rename(target_index = index) %>% 
  select(source_index, target_index, value) %>%
  rename(source = source_index,
         target = target_index) -> link



fig <- plot_ly(type = "sankey", orientation = "h", 

  node = list(
    label = nodes$label,
    color = nodes$color,
    pad = 15,
    thickness = 20,
    line = list(color = "black", width = 0.5),
    hovertemplate = "%{label}: %{value:.0f} papers<extra></extra>"
    ),
  
  link = list(
    source = link$source,
    target = link$target,
    value =  as.integer(link$value),
    hovertemplate = "%{value:.0f} papers<extra></extra>"
  ))

fig <- fig %>% layout(
  title = "Unjournal Paper Flow Diagram",
  font = list(size = 10)
)

fig


```

